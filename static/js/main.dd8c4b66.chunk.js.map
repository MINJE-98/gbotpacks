{"version":3,"sources":["contract.ts","hooks/workaround.ts","hooks/usePromiseTransaction.ts","hooks/Gbots.ts","res/legendary.png","res/epic.png","res/rare.png","res/common.png","hooks/gmee.ts","PackCard.tsx","App.tsx","reportWebVitals.ts","theme.ts","index.tsx"],"names":["gbotsSale","whitelist","gmee","useContractFunction","contract","functionName","chainId","options","useState","undefined","events","setEvents","status","state","setState","addTransaction","useTransactionsContext","promiseTransaction","transactionPromise","a","transaction","submittedAt","Date","now","transactionName","wait","receipt","errorMessage","reason","message","console","log","usePromiseTransaction","send","useCallback","sendPromise","then","result","logs","length","map","interface","parseLog","signer","ethers","providers","Web3Provider","window","ethereum","getSigner","gbotsSaleContractInterface","utils","Interface","gbotsContractAbi","Contract","gmeeAbi","PackCard","packCode","gbotpackAmount","setGbotpackAmount","check","setCheck","account","useEthers","allowance","useTokenAllowance","commonAmount","useContractCall","abi","address","method","args","useGetCommonAmount","usePurchaseFor","statePurchaseFor","sendPurchaseFor","useApprove","approveState","sendApprove","toast","useToast","autoBot","setTimeout","approve","useEffect","title","position","description","duration","isClosable","RenderForGrade","dataList","Image","name","tag","price","common","rare","epic","legendary","w","h","src","size","isChecked","onChange","color","fontSize","fontWeight","formatUnits","placeholder","event","target","value","selected","mt","onClick","buyBot","App","skuList","slice","useGetSkuList","blockNumber","useBlockNumber","isPaused","useGetPaused","bg","height","divider","borderColor","spacing","align","fontFamily","columns","find","v","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","theme","extendTheme","fonts","heading","body","backGroundColor","ReactDOM","render","StrictMode","DAppProvider","config","document","getElementById"],"mappings":"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","file":"static/js/main.dd8c4b66.chunk.js","sourcesContent":["export const gbotsSale = \"0x2db2600FdD56c74521e528BE4672C68746911345\";\nexport const whitelist = [\n  \"0xB96882fa594888Ca8086000cAa5E6f6fa86aD7F9\",\n  \"0xC29A387CFeA0c6b11aC535a9517a92763C7817bA\",\n  \"0x9760d1ee1636fd9d74c2A3D0a269539d3b27cB40\",\n  \"0x8928bc49dE9c7c1896C073Da72C1816d5F96C28E\",\n];\nexport const owner = \"0xB96882fa594888Ca8086000cAa5E6f6fa86aD7F9\";\nexport const gmee = \"0xcf32822ff397ef82425153a9dcb726e5ff61dca7\";\n\nexport const LegendaryPack =\n  \"0x6c6567656e646172792d73616c652d676d656500000000000000000000000000\";\nexport const EpicPack =\n  \"0x657069632d73616c652d676d6565000000000000000000000000000000000000\";\nexport const RarePack =\n  \"0x726172652d73616c652d676d6565000000000000000000000000000000000000\";\nexport const CommonPack =\n  \"0x636f6d6d6f6e2d73616c652d676d656500000000000000000000000000000000\";\n\n// '0x1926aa2642513b13594e5eb2d7228283634ed3bc' matic\n","import { useCallback, useState } from \"react\";\nimport { usePromiseTransaction } from \"./usePromiseTransaction\";\nimport { Contract } from \"@ethersproject/contracts\";\n\nexport const useContractFunction = (\n  contract: Contract,\n  functionName: string,\n  chainId: number | undefined,\n  options?: { transactionName?: string }\n) => {\n  const [events, setEvents] = useState<Record<string, any> | undefined>(\n    undefined\n  );\n\n  const { promiseTransaction, state } = usePromiseTransaction(chainId, options);\n\n  const send = useCallback(\n    async (...args: any[]) => {\n      const sendPromise = contract[functionName](...args).then(\n        (result: any): Promise<any> => {\n          // Need to add chainId here to prevent \"TypeError: Unsupported Chain\" error message\n          result.chainId = chainId;\n          return result;\n        }\n      );\n\n      const receipt: any = await promiseTransaction(sendPromise);\n\n      if (receipt) {\n        if (receipt.logs && receipt.logs.length > 0) {\n          setEvents(\n            receipt.logs.map((log: any) => contract.interface.parseLog(log))\n          );\n        } else {\n          setEvents([]);\n        }\n      }\n    },\n    [contract, functionName, options]\n  );\n\n  return { send, state, events };\n};\n","import { TransactionResponse } from \"@ethersproject/abstract-provider\";\nimport { useState } from \"react\";\nimport { useTransactionsContext } from \"@usedapp/core/dist/esm/src\";\nimport {\n  TransactionStatus,\n  TransactionOptions,\n} from \"@usedapp/core/dist/esm/src\";\n\nexport function usePromiseTransaction(\n  chainId: number | undefined,\n  options?: TransactionOptions\n) {\n  const [state, setState] = useState<TransactionStatus>({ status: \"None\" });\n  const { addTransaction } = useTransactionsContext();\n\n  const promiseTransaction = async (\n    transactionPromise: Promise<TransactionResponse>\n  ) => {\n    if (!chainId) return;\n    let transaction: any = undefined;\n    try {\n      transaction = await transactionPromise;\n\n      setState({ transaction, status: \"Mining\", chainId });\n      addTransaction({\n        transaction,\n        submittedAt: Date.now(),\n        transactionName: options?.transactionName,\n      });\n      const receipt = await transaction.wait();\n\n      setState({ receipt, transaction, status: \"Success\", chainId });\n    } catch (e: any) {\n      const errorMessage = e.reason ?? e.message;\n      console.log(e);\n\n      if (transaction) {\n        setState({\n          status: \"Fail\",\n          transaction,\n          receipt: e.receipt,\n          errorMessage,\n          chainId,\n        });\n      } else {\n        setState({ status: \"Exception\", errorMessage, chainId });\n      }\n    }\n  };\n  return { promiseTransaction, state };\n}\n","import { ethers } from \"ethers\";\nimport { Contract } from \"@ethersproject/contracts\";\nimport { useContractCall } from \"@usedapp/core\";\nimport gbotsContractAbi from \"../abi/gbotsSale.json\";\nimport { gbotsSale } from \"../contract\";\nimport { useContractFunction } from \"./workaround\";\n\ndeclare const window: any;\nconst provider = new ethers.providers.Web3Provider(window.ethereum);\nconst signer = provider.getSigner();\n\nconst gbotsSaleContractInterface = new ethers.utils.Interface(gbotsContractAbi);\nconst contract = new Contract(gbotsSale, gbotsSaleContractInterface, signer);\n\nexport function useGetPaused() {\n  const [isPaused] =\n    useContractCall({\n      abi: gbotsSaleContractInterface,\n      address: gbotsSale,\n      method: \"paused\",\n      args: [],\n    }) ?? [];\n  return !isPaused ? \"O\" : \"X\";\n}\n\n// 등급 종류\nexport function useGetSkuList() {\n  let [skuList] =\n    useContractCall({\n      abi: gbotsSaleContractInterface,\n      address: gbotsSale,\n      method: \"getSkus\",\n      args: [],\n    }) ?? [];\n  if (!!skuList) skuList = skuList.slice(4);\n  return skuList;\n}\n\n// 일단 등급\nexport function useGetCommonAmount(packCode: any) {\n  const [commonAmount] =\n    useContractCall({\n      abi: gbotsSaleContractInterface,\n      address: gbotsSale,\n      method: \"getSkuInfo\",\n      args: [packCode],\n    }) ?? [];\n  return commonAmount;\n}\n// 레어 등급\nexport function useGetRareAmount(packCode: any) {\n  const [rareAmount] =\n    useContractCall({\n      abi: gbotsSaleContractInterface,\n      address: gbotsSale,\n      method: \"getSkuInfo\",\n      args: [packCode],\n    }) ?? [];\n  return rareAmount;\n}\n//  에픽 등급\nexport function useGetEpicAmount(packCode: any) {\n  const [epicAmount] = useContractCall({\n    abi: gbotsSaleContractInterface,\n    address: gbotsSale,\n    method: \"getSkuInfo\",\n    args: [packCode],\n  }) ?? [packCode];\n  return epicAmount;\n}\n// 레전더리 등급\nexport function useGetLegendaryAmount(packCode: any) {\n  const [legendaryAmount] =\n    useContractCall({\n      abi: gbotsSaleContractInterface,\n      address: gbotsSale,\n      method: \"getSkuInfo\",\n      args: [packCode],\n    }) ?? [];\n  return legendaryAmount;\n}\n\nexport function usePurchaseFor() {\n  const { state, send } = useContractFunction(contract, \"purchaseFor\", 137);\n  return { state, send };\n}\n","export default __webpack_public_path__ + \"static/media/legendary.8fa7f4ac.png\";","export default __webpack_public_path__ + \"static/media/epic.d0dc89e6.png\";","export default __webpack_public_path__ + \"static/media/rare.5c0164a8.png\";","export default __webpack_public_path__ + \"static/media/common.ca086d64.png\";","import { ethers } from \"ethers\";\nimport { Contract } from \"@ethersproject/contracts\";\nimport gmeeAbi from \"../abi/gmee.json\";\nimport { gmee } from \"../contract\";\nimport { useContractFunction } from \"./workaround\";\n\ndeclare const window: any;\nconst provider = new ethers.providers.Web3Provider(window.ethereum);\nconst signer = provider.getSigner();\n\nconst gbotsSaleContractInterface = new ethers.utils.Interface(gmeeAbi);\nconst contract = new Contract(gmee, gbotsSaleContractInterface, signer);\n\nexport function useApprove() {\n  const { state, send } = useContractFunction(contract, \"approve\", 137);\n  return { state, send };\n}\n","import React, {useEffect, useState } from \"react\";\nimport { useTokenAllowance, useEthers } from \"@usedapp/core\";\nimport { CommonPack, gbotsSale, gmee } from \"./contract\";\nimport { useGetCommonAmount, usePurchaseFor } from \"./hooks/Gbots\";\nimport { formatUnits } from \"ethers/lib/utils\";\nimport { useToast, Select, Switch } from \"@chakra-ui/react\";\nimport { Box, Text } from \"@chakra-ui/layout\";\nimport { Image } from \"@chakra-ui/image\";\nimport  legendary  from \"./res/legendary.png\"\nimport  epic  from \"./res/epic.png\"\nimport  rare  from \"./res/rare.png\"\nimport  common  from \"./res/common.png\"\nimport { useApprove } from \"./hooks/gmee\";\nimport { Button } from \"@chakra-ui/button\";\n\n\nexport default function PackCard({ packCode }: any) {\n  const [gbotpackAmount, setGbotpackAmount] = useState(\"1\");\n  const [check, setCheck] = useState(false);\n  const { account } = useEthers();\n  const allowance = useTokenAllowance(gmee, account, gbotsSale);\n  const commonAmount = useGetCommonAmount(packCode)\n  const { state: statePurchaseFor, send: sendPurchaseFor } = usePurchaseFor();\n  const { state: approveState, send: sendApprove } = useApprove();\n  const toast = useToast();\n  const buyBot = (packCode: any) =>{\n    console.log(account)\n    console.log(gmee)\n    console.log(packCode);\n    console.log(gbotpackAmount);\n    console.log(\"0x00\");\n    sendPurchaseFor(account, gmee, packCode, gbotpackAmount ,\"0x00\")\n    }\n    const autoBot = (packCode: any) =>{\n      setTimeout(()=>{\n        console.log(account)\n        console.log(gmee)\n        console.log(packCode);\n        console.log(gbotpackAmount);\n        console.log(\"0x00\");\n        sendPurchaseFor(account, gmee, packCode, gbotpackAmount ,\"0x00\")\n      }, 1000)\n      }\n    const approve = () =>{\n        sendApprove(gbotsSale,\"115792089237316195423570985008687907853269984665640564039457584007913129639935\")\n    }\n    useEffect(()=>{\n      console.log(\"또??\")\n        if(approveState.status === \"Mining\" && statePurchaseFor.status === \"Mining\") {\n            toast({\n                title: \"트랜젝션 제출됨\",\n                position: \"top-right\",\n                description: \"트랜젝션이 제출되었습니다.\",\n                status: \"info\",\n                duration: 9000,\n                isClosable: true,\n              })\n        }\n        if(approveState.status === \"Success\" && statePurchaseFor.status === \"Success\") {\n            toast({\n                title: \"트랜젝션 제출 확인됨\",\n                position: \"top-right\",\n                description: \"트랜젝션 제출 확인되었습니다!\",\n                status: \"success\",\n                duration: 9000,\n                isClosable: true,\n              })\n        }\n        if(approveState.status === \"Fail\"&& statePurchaseFor.status === \"Fail\") {\n            toast({\n                title: \"트랜젝션 실패\",\n                position: \"top-right\",\n                description: approveState.errorMessage,\n                status: \"error\",\n                duration: 9000,\n                isClosable: true,\n              })\n        }\n        if(approveState.status === \"Exception\" && statePurchaseFor.status === \"Exception\") {\n            toast({\n                title: \"트랜젝션 제출 실패\",\n                position: \"top-right\",\n                description: approveState.errorMessage,\n                status: \"error\",\n                duration: 9000,\n                isClosable: true,\n              })\n        }\n    },[approveState])\n    const RenderForGrade = ({packCode}: any) =>{\n        const dataList = {\n            Image: \"\",\n            name: \"\",\n            tag: \"\",\n            price: 0\n        }\n        if('0x636f6d6d6f6e2d73616c652d676d656500000000000000000000000000000000' === packCode) {\n            dataList.Image = common\n            dataList.name = \"Common Pack\"\n            dataList.price = 100\n        }\n        if('0x726172652d73616c652d676d6565000000000000000000000000000000000000' === packCode) {\n            dataList.Image = rare\n            dataList.name = \"Rare Pack\"\n            dataList.price = 500\n        }\n        if('0x657069632d73616c652d676d6565000000000000000000000000000000000000' === packCode) {\n            dataList.Image =  epic\n            dataList.name = \"Epic Pack\"\n            dataList.price = 2000\n        }\n        if('0x6c6567656e646172792d73616c652d676d656500000000000000000000000000' === packCode) {\n            dataList.Image =  legendary\n            dataList.name = \"Legendary Pack\"\n            dataList.price = 5000\n        }\n        return(\n        <Box>\n            <Image w=\"200\" h=\"200\"  src={dataList.Image} />\n            <Box>\n                <Switch size='lg' isChecked={check} onChange={()=> setCheck(!check)}/>\n                <Text color=\"white\" fontSize='lg' fontWeight=\"800\">\n                    {dataList.name}\n                </Text>\n                <Text color=\"white\" fontSize='lg' fontWeight=\"400\">\n                    {!commonAmount ? <></> : formatUnits(commonAmount,0)}개 남았습니다.\n                </Text>\n                <Text color=\"white\" fontSize='lg' fontWeight=\"400\">\n                    {dataList.price}\n                </Text>\n                <Select color='white' placeholder='갯수 설정' onChange={(event)=> setGbotpackAmount(event.target.value)} >\n                  <option key=\"1\" value=\"1\" selected={gbotpackAmount === \"1\" ? true : false} >1</option>\n                  <option key=\"2\" value='2' selected={gbotpackAmount === \"2\" ? true : false} >2</option>\n                </Select>\n                {check ? autoBot(packCode) : <></>}\n                <Text>\n                    {!allowance ? <></> : +(formatUnits(allowance, 0)) > 0 ? <Button mt=\"5\" w=\"100%\" onClick={()=> buyBot(packCode)}>구입</Button>: <Button mt=\"5\" w=\"100%\" onClick={approve}>승인</Button> }\n                </Text>\n            </Box>\n        </Box>\n        )\n    }\n    return(\n        <RenderForGrade packCode={packCode} />\n    )\n}","\nimport { useBlockNumber, useTokenAllowance, useEthers } from '@usedapp/core';\nimport { useGetCommonAmount, useGetPaused, useGetSkuList, usePurchaseFor } from './hooks/Gbots';\nimport React, { useEffect, useState } from 'react';\nimport { CommonPack, gbotsSale, gmee, whitelist } from './contract';\nimport { formatUnits } from \"ethers/lib/utils\";\nimport PackCard from './PackCard';\nimport { Box, Center, Flex, SimpleGrid, Stack, StackDivider, Text, VStack } from '@chakra-ui/layout';\nimport { Grid } from '@chakra-ui/react';\n\nfunction App() {\n  // const [commonAmount, setCommonAmount] = useState(1)\n  // const [rareAmount, setRareAmount] = useState(1)\n  // const [epicAmount, setEpicAmount] = useState(1)\n  // const [legendaryAmount, setLegendaryAmount] = useState(1)\n  const skuList = useGetSkuList();\n  const blockNumber = useBlockNumber();\n  const isPaused = useGetPaused();\n  const { account } = useEthers();\n  return (\n    <Center bg=\"blackAlpha.900\" height=\"1400\">\n      <VStack\n        divider={<StackDivider borderColor='gray.200' />}\n        spacing={4}\n        align='stretch'\n      >\n        <Stack spacing={3}>\n            <Text color=\"white\" fontSize='lg' fontWeight=\"500\" fontFamily=\"IM_Hyemin-Bold\">\n              현재 블럭 : {blockNumber}\n            </Text>\n            <Text color=\"white\"  fontSize='lg' fontWeight=\"500\" fontFamily=\"IM_Hyemin-Bold\">\n              지봇 판매 상태: {isPaused}\n            </Text>\n        </Stack>\n        <SimpleGrid columns={2} spacing={10}>\n          {\n          !!whitelist.find(v=> v === account) ? !skuList ? <></> : skuList.map((v:any)=> <PackCard packCode={v} />): <Text color=\"white\" fontSize='lg' fontWeight=\"500\" fontFamily=\"IM_Hyemin-Bold\">서비스 이용 불가.</Text>\n          }\n        </SimpleGrid>\n        </VStack>\n    </Center>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { extendTheme } from '@chakra-ui/react'\n\nconst theme = extendTheme({\n  fonts: {\n    heading: 'Open Sans',\n    body: 'Inter',\n  },\n  backGroundColor:{\n      color: \"black\"\n  }\n})\n\nexport default theme","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { DAppProvider } from \"@usedapp/core\";\nimport { ChakraProvider } from '@chakra-ui/react'\nimport theme from './theme';\n\nReactDOM.render(\n  <React.StrictMode>\n    <DAppProvider config={{}}>\n    <ChakraProvider theme={theme}>\n    <App />\n    </ChakraProvider>\n    </DAppProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}